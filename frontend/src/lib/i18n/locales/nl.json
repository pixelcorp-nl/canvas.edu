{
	"base": {
		"hint": "tip"
	},
	"tip.header": "Tip",
	"assignment.header": "Opdracht",
	"trinket": "Voer hier je code uit!",
	"header.info": "Informatie",
	"header.canvas": "Canvas",
	"header.color": "Kleur",
	"header.extra": "Extra uitdagingen",
	"info.title": "Over dit project",
	"info.short": "Op dit digitale canvas is het alleen mogelijk om pixels te plaatsen door middel van code.\n\nTijdens deze workshop gaan we code schrijven om het canvas te bewerken en samen een kunstwerk te maken.",
	"info.subtitle": "Dit project is bedoeld voor educatie en dus is het alleen mogelijk via de API te communiceren. Het is niet mogelijk om het canvas te veranderen via de website.",
	"info.codeEnvironment": "Alle voorbeelden mogen gekopieerd worden! De code kan worden gerunt op deze website:",
	"info.helloworld": "Hallo wereld! We gaan nu het kleinste programma schrijven dat er is!",
	"info.variables": "In scripts moeten we de computer vaak informatie kort laten onthouden. Dit doen we met variabelen, het volgende voorbeeld laat zien hoe dat in zijn werk gaat.",
	"info.math": "Variabelen zijn erg handig omdat je er ook mee kan rekenen.",
	"info.putPixel": "We gaan nu een pixel plaatsen op het canvas met behulp van python code en de python requests bibliotheek. We hebben hier een voorbeeld dat 1 pixel zal veranderen op het canvas.",
	"info.loops1": "Tot nog toe hebben we om meer pixels te plaatsen het script aangepast of de code gekopieerd en onder elkaar geplakt. Dit is niet heel handig en als we een lijn willen maken moeten we bijvoorbeeld 10x het script veranderen en aanzetten.",
	"info.indentation": "In Python is het belangrijk dat je de code op de juiste manier indeelt. Dit betekend dat je de code die bij elkaar hoort evenveel spaties naar rechts moet zetten.",
	"info.functions1": "Tot nu toe hebben we alleen functies gebruikt die door al gemaakt zijn. Python laat ons ook zelf nieuwe functies toevoegen. Dit is heel handig, zodat we code niet moeten herhalen.",
	"info.functions2": "In ons script is het handig om een paar hulp functies te maken zodat het script overzichtelijk blijft.",
	"info.extra1": "Vanaf hier mag je alles doen wat je wilt. Hieronder zijn wat optionele eind opdrachten voor als je iets verder wilt gaan dan wat we in de opdrachten hiervoor hebben gedaan.",
	"info.loops2": "Bij de volgende opdracht gaan we gebruik maken van een for loop om meerdere pixels te plaatsen terwijl we het script maar 1x aan hoeven te zetten.",
	"info.challenges": "Je mag om een extra uitdaging vragen aan de begleiders of zelf iets bedenken.",
	"info.color1": "In het programmeren kan je verschillende kleuren maken door 3 verschillende basiskleuren te mengen. Door een kleur sterker of minder sterk naar voren te laten komen kan je alle kleuren maken.",
	"info.color2": "De kleuren die we gebruiken zijn RGB: rood, groen en blauw. een waarde van 0 betekend dat de kleur bijna niet voorkomt en de hoogste waarde van 255 betekend dat de kleur helemaal aan staat.",
	"info.color3": "Dus [255,255,255] is wit, [0,0,0] is zwart, [255,0,0] is rood, [0,255,0] is groen en [0,0,255] is blauw.",
	"info.header1": "Inleiding",
	"info.header2": "Een wijziging aanbrengen op het canvas",
	"info.header3": "Veranderingen in realtime bekijken",
	"info.header4": "Wat is JSON?",
	"info.header5": "Klein voorbeeld",
	"info.content1": "In dit project leren we hoe we een pixel op een canvas kunnen veranderen en ervoor zorgen dat iedereen de veranderingen in realtime kan zien. We gaan berichten naar een server sturen die zal de verandering uitvoeren op het canvas. De berichten worden opgesteld in JSON, dit is een manier om data te weergeven op een manier dat mensen en computers het kunnen gebruiken.",
	"info.content2": "Om een pixel op het canvas te veranderen, zullen we in het voorbeeld gebruikmaken van Python-code en een bibliotheek genaamd 'requests'. Het zal ons helpen een bericht naar een server te sturen die het canvas zal updaten met de nieuwe kleur. We zullen een speciaal formaat genaamd JSON gebruiken om het bericht te structureren dat we naar de server sturen. Overigens is Python niet de enige taal waarmee je dit zou kunnen doen. Je kunt ook JavaScript, Java, C#, PHP, Ruby, C++, enz. gebruiken. Het is ook mogelijk om een andere taal te gebruiken, zolang je maar een manier vindt om een bericht naar de server te sturen.",
	"info.content3": "Wanneer we een verandering aanbrengen op het canvas, kan iedereen de veranderingen in realtime zien. Dit is mogelijk dankzij een speciale technologie genaamd WebSocket. Het stelt ons in staat om berichten heen en weer te sturen tussen de server en alle apparaten die het canvas bekijken, zodat iedereen de veranderingen tegelijkertijd ziet.",
	"info.content4": "JSON is een eenvoudige manier om gegevens te organiseren zodat computers het kunnen begrijpen. We zullen het gebruiken om een bericht naar de server te sturen met de kleur die we willen gebruiken om de pixel bij te werken. JSON is echt gemakkelijk te lezen en te schrijven voor mensen, en het is ook gemakkelijk voor computers om te begrijpen. Hieronder kan je een voorbeeld zien van een JSON-bericht dat we naar de server zullen sturen.",
	"info.content5": "Je kunt onder andere Python gebruiken om een bericht naar een server te sturen zodat je een pixel op het canvas kunt veranderen. In het voorbeeld hieronder gebruiken wij de requests library om het bericht te verzenden in het JSON-gegevensformaat.",
	"info.info1": "De opdrachten gaan er vannuit dat er geen voorkennis over programmeren is.",
	"code.json.title": "JSON body voorbeeld",
	"code.python.title": "Python voorbeeld",
	"copy": "Kopieer",
	"copy.success": "Gekopieerd!",
	"footer": "Gemaakt met ❤️ door",
	"comments": {
		"one": "# Dit is de url van de server waar we de pixels heen sturen.",
		"two": "# Pixel informatie in JSON formaat.\n# De \"key\" bevat een geheime code die voor iedereen uniek is.\n# Zo weet de server wie welke pixel gestuurd heeft.",
		"three": "# Hier wordt de pixelinformatie naar de server verstuurd.\n# We gebruiken hiervoor de post functie uit de requests bibliotheek",
		"four": "# Hier wordt het resultaat geprint zodat we weten of ons script succesvol is uitgevoerd.",
		"five": "# Als het gelukt is wordt er een succesbericht geprint.",
		"six": "# Als het niet gelukt is wordt er een foutbericht geprint met de HTTP status code."
	},
	"code": {
		"python": {
			"putPixel1": "import requests\nimport json\n\n# Dit is de url van de server waar we depixels heensturen.\n",
			"putPixel2": "\nheaders = {'Content-Type': 'application/json'}\n\n# Dit is een functie.\n# Deze functie gaan we straks gebruiken om een pixel te sturen naar het canvas.\ndef sendPixel(pixel):\n",
			"putPixel3": "\n    print(response.content)\n\n# Eerst gaan we een pixel aanmaken.\n# Dit is een variabele die de volgende informatie bevat.\n#    x: het x coordinaat waar we de pixel willen plaatsen.\n#    y: het y coordinaat waar we de pixel willen plaatsen.\n#    color: de kleur dat de pixel moet worden in RGB.\n",
			"putPixel4": "\n\n# Door deze pixel variabele mee te geven aan de sendPixel functie wordt hij naar de server verstuurd.\nsendPixel(pixel)",
			"color": "# Pixel informatie in JSON formaat.\n# Deze pixel wordt rood, omdat de eerste waarde van color helemaal aan staat en de rest helemaal uit staat.\n",
			"comment1": "# De # aan het begin van deze regel geeft aan dat dit een comment is.\n# Comments worden niet uitgevoerd wanneer we een script runnen.\n# Ze zijn wel heel handig voor onszelf om aan te geven waarom we iets hebben gedaan!",
			"comment2": "Definieer de pixelgegevens als een Python-dictionary",
			"comment3": "Verstuur een POST-aanvraag naar het API-eindpunt met de pixelgegevens als JSON",
			"comment4": "Controleer of de aanvraag succesvol was",
			"comment5": "Als de aanvraag succesvol was, print dan een succesbericht",
			"comment6": "Als de aanvraag niet succesvol was, print dan een foutbericht dat de HTTP-statuscode bevat",
			"loop": "# Dit script gebruikt een for loop om 1 tot en met 10 te printen.\nfor i in range(0, 10):\n    # Alles wat op deze indentatie staat valt in de for loop.\n    p = i + 1\n    print(p)\n# Zodra er weer iets zonder extra indentatie staat valt het buiten de for loop.\nprint(\"buiten de for loop\")",
			"function": "# Het keyword def geeft aan dat we een eigen functie maken\n# tussen de haakjes staat world, dit is een variabel die we mee kunnen geven die in de functie gebruikt kan worden.\ndef hello_world(world):\n    print(\"hello world:\", world, \"!\")\n\nhello_world(\"aarde\")",
			"prototypes": "# len is het aantal pixels dat de lijn lang is.\ndef create_horizontal_line(x, y, color, len):\n\ndef create_vertical_line(x, y, color, len):",
			"helloworld": "# Dit is de print functie, deze kan infomatie weergeven en een venster wat wij de console noemen.\nprint(\"hello world!\")",
			"printx": "x = 42\nprint(x)",
			"addition": "x = x + 1"
		}
	},
	"exercise": {
		"addition": "Maak met behulp van de 2 bovenstaande codes een programma dat 43 uitprint.",
		"putPixel": "Kopier de code en controleer of we een pixel op het canvas hebben geplaatst nadat je het uitgevoerd hebt met de Run knop",
		"putPixel2": "Is de pixel geplaatst op deze locatie?",
		"color1": "Plaats een gekleurde pixel op het canvas",
		"color2": "Plaats een roze, oranje, paarse en lichtgroene pixel op het canvas",
		"color3": "Plaats 2 pixels op het canvas door één keer het script te runnen.",
		"loop": "Gebruik een for loop om een lijn van 10 pixels te plaatsen.",
		"functions1": "Maak functies met de prototypen in het voorbeeld hieronder.",
		"functions2": "Gebruik de functies die je net hebt gemaakt om een vierkant te maken.",
		"functions3": "Maak een functie die een vierkant kan tekenen.",
		"extra1": "Maak een functie die een cirkel kan tekenen.",
		"extra2": "Maak een functie die kleine pixelfiguur kan tekenen op een random locatie",
		"extra3": "Maak een functie die een lijn kan tekenen.",
		"helloworld": "Kopier dit stukje code en run het in Trinket. En controleer of de tekst op de rechter kant verschijnt."
	},
	"hint": {
		"colab": "Als je er niet uikomt kijk hoe anderen het voor elkaar krijgen."
	}
}
