{
	"header.info": "Information",
	"header.canvas": "Canvas",
	"header.color": "Color",
	"header.extra": "Extra challenges",
	"info.title": "About this project",
	"info.short": "On this digital canvas, it is only possible to place pixels using code.\n\nDuring this workshop, we will write code to edit the canvas and create a piece of art together.",
	"info.subtitle": "This project is intended for education and therefore it is only possible to communicate via the API. It is not possible to change the canvas via the website.",
	"info.codeEnvironment": "All examples may be copied! The code can be run on this website:",
	"info.helloworld": "Hello world! We are now going to write the smallest program there is!",
	"info.variables": "In scripts, we often need the computer to remember information briefly. We do this with variables, the following example shows how that works.",
	"info.math": "Variables are very useful because you can also do calculations with them.",
	"info.putPixel": "We are now going to place a pixel on the canvas using Python code and the Python requests library. We have an example here that will change 1 pixel on the canvas.",
	"info.loops1": "So far, we have modified the script or copied the code and pasted it below to place more pixels. This is not very convenient, and if we want to make a line, we would have to change and run the script 10 times.",
	"info.indentation": "In Python, it is important to format your code correctly. This means that you need to indent code that belongs together equally.",
	"info.functions1": "So far, we have only used functions that have already been created. Python also allows us to add new functions. This is very useful so we don't have to repeat code.",
	"info.functions2": "In our script, it is useful to create some helper functions to keep the script organized.",
	"info.extra1": "From now on, you can do whatever you want. Below are some optional final assignments if you want to go a bit further than what we have done in the previous assignments.",
	"info.loops2": "In the next assignment, we will use a for loop to place multiple pixels while only running the script once.",
	"info.challenges": "You may ask for an extra challenge from the guides or come up with something yourself.",
	"info.color1": "In programming, you can create different colors by mixing 3 different primary colors. By making a color stronger or weaker, you can create all colors.",
	"info.color2": "The colors we use are RGB: red, green, and blue. A value of 0 means that the color is almost absent, and the highest value of 255 means that the color is fully on.",
	"info.color3": "So [255,255,255] is white, [0,0,0] is black, [255,0,0] is red, [0,255,0] is green, and [0,0,255] is blue.",
	"info.header1": "Introduction",
	"info.header2": "Making a change to the canvas",
	"info.header3": "Viewing changes in real-time",
	"info.header4": "What is JSON?",
	"info.header5": "Small example",
	"info.content1": "In this project, we learn how to change a pixel on a canvas and ensure that everyone can see the changes in real-time. We will send messages to a server that will make the change on the canvas. The messages are structured in JSON, which is a way to represent data that is usable by both humans and computers.",
	"info.content2": "To change a pixel on the canvas, we will use Python code and a library called 'requests' in the example. It will help us send a message to a server that will update the canvas with the new color. We will use a special format called JSON to structure the message we send to the server. By the way, Python is not the only language you could use. You could also use JavaScript, Java, C#, PHP, Ruby, C++, etc. It is also possible to use another language as long as you find a way to send a message to the server.",
	"info.content3": "When we make a change to the canvas, everyone can see the changes in real-time. This is possible thanks to a special technology called WebSocket. It allows us to send messages back and forth between the server and all devices viewing the canvas so that everyone sees the changes simultaneously.",
	"info.content4": "JSON is a simple way to organize data so that computers can understand it. We will use it to send a message to the server with the color we want to use to update the pixel. JSON is really easy to read and write for humans, and it is also easy for computers to understand. Below you can see an example of a JSON message that we will send to the server.",
	"info.content5": "You can use Python, among other things, to send a message to a server so you can change a pixel on the canvas. In the example below, we use the requests library to send the message in JSON data format.",
	"info.info1": "The assignments assume no prior knowledge of programming.",
	"code.json.title": "JSON body example",
	"code.python.title": "Python example",
	"copy": "Copy",
	"copy.success": "Copied!",
	"footer": "Made with ❤️ by",
	"code": {
		"python": {
			"putPixel": "import requests\nimport json\n\n# This is the url of the server where we send the pixels.url = '${root}/api/single'\nheaders = {'Content-Type': 'application/json'}\n\n# This is a function.\n# We will use this function to send a pixel to the canvas.\ndef sendPixel(pixel):\n    response = requests.post(url, headers=headers, data=json.dumps({**pixel, 'key': '${apikey}'}))\n    print(response.content)\n\n# First, we will create a pixel.\n# This is a variable that contains the following information.\n#    x: the x coordinate where we want to place the pixel.\n#    y: the y coordinate where we want to place the pixel.\n#    color: the color the pixel should be in RGB.\npixel = {'x': ${x}, 'y': ${y}, 'color': [0, 25, 255]}\n\n# By passing this pixel variable to the sendPixel function, it will be sent to the server.\nsendPixel(pixel)",
			"comment1": "Define the URL of the API endpoint and the request headers",
			"comment2": "Define the pixel data as a Python dictionary",
			"comment3": "Send a POST request to the API endpoint with the pixel data as JSON",
			"comment4": "Check if the request was successful",
			"comment5": "If the request was successful, print a success message",
			"comment6": "If the request was not successful, print an error message that contains the HTTP status code"
		}
	},
	"exercise": {
		"addition": "Using the 2 codes above, create a program that prints 43.",
		"putPixel": "Copy the code and check if we placed a pixel on the canvas after running it with the Run button.",
		"putPixel2": "Is the pixel placed at this location?",
		"loop": "Use a for loop to place a line of 10 pixels.",
		"functions1": "Create functions with the prototypes in the example below.",
		"functions2": "Use the functions you just created to make a square.",
		"functions3": "Create a function that can draw a square.",
		"extra1": "Create a function that can draw a circle.",
		"extra2": "Create a function that can draw a small pixel figure at a random location",
		"extra3": "Create a function that can draw a line."
	}
}
