{
	"base": {
		"hint": "tip"
	},
	"tip.header": "Tip",
	"assignment.header": "Assignment",
	"trinket": "Run your code here!",
	"header.info": "Information",
	"header.canvas": "Canvas",
	"header.color": "Color",
	"header.extra": "Extra Challenges",
	"info.title": "About This Project",
	"info.short": "On this digital canvas, you can only place pixels using code.\n\nDuring this workshop, we will write code to modify the canvas and create an artwork together.",
	"info.subtitle": "This project is meant for educational purposes and can only be communicated with via the API. It is not possible to change the canvas through the website.",
	"info.codeEnvironment": "All examples can be copied! The code can be run on this website:",
	"info.helloworld": "Hello world! We are going to write the smallest program that exists!",
	"info.variables": "In scripts, we often need the computer to remember information for a short time. We do this with variables. The following example shows how this works.",
	"info.math": "Variables are very useful because you can also use them to do calculations.",
	"info.putPixel": "Now we are going to place a pixel on the canvas using Python code and the Python requests library. Here we have an example that will change 1 pixel on the canvas.",
	"info.loops1": "So far, we have adjusted the script or copied the code and placed it below each other to place more pixels. This is not very convenient, and if we want to make a line, we would have to change and run the script 10 times, for example.",
	"info.indentation": "In Python, it is important that you format the code correctly. This means you need to indent the code that belongs together by the same number of spaces.",
	"info.functions1": "So far, we have only used functions that are already made. Python also allows us to add new functions ourselves. This is very useful so that we do not have to repeat code.",
	"info.functions2": "In our script, it is useful to create a few helper functions to keep the script organized.",
	"info.extra1": "From here, you can do anything you want. Below are some optional final assignments if you want to go a bit further than what we have done in the previous assignments.",
	"info.loops2": "In the next assignment, we will use a for loop to place multiple pixels while only having to run the script once.",
	"info.challenges": "You can ask the staff for an extra challenge or come up with something yourself.",
	"info.color1": "In programming, you can create different colors by mixing 3 different primary colors. By making a color stronger or weaker, you can create all colors.",
	"info.color2": "The colors we use are RGB: red, green, and blue. A value of 0 means that the color is almost not present, and the highest value of 255 means that the color is fully on.",
	"info.color3": "So [255,255,255] is white, [0,0,0] is black, [255,0,0] is red, [0,255,0] is green, and [0,0,255] is blue.",
	"info.header1": "Introduction",
	"info.header2": "Making a Change on the Canvas",
	"info.header3": "Viewing Changes in Real-Time",
	"info.header4": "What is JSON?",
	"info.header5": "Small Example",
	"info.content1": "In this project, we will learn how to change a pixel on a canvas and make sure everyone can see the changes in real-time. We will send messages to a server that will apply the change to the canvas. The messages will be formatted in JSON, which is a way to represent data so that both humans and computers can use it.",
	"info.content2": "To change a pixel on the canvas, we will use Python code and a library called 'requests' in the example. It will help us send a message to a server that will update the canvas with the new color. We will use a special format called JSON to structure the message we send to the server. However, Python is not the only language you could use. You can also use JavaScript, Java, C#, PHP, Ruby, C++, etc. It is also possible to use another language as long as you find a way to send a message to the server.",
	"info.content3": "When we make a change on the canvas, everyone can see the changes in real-time. This is possible thanks to a special technology called WebSocket. It allows us to send messages back and forth between the server and all devices viewing the canvas so that everyone sees the changes at the same time.",
	"info.content4": "JSON is a simple way to organize data so that computers can understand it. We will use it to send a message to the server with the color we want to use to update the pixel. JSON is really easy to read and write for humans, and it is also easy for computers to understand. Below you can see an example of a JSON message that we will send to the server.",
	"info.content5": "Among other things, you can use Python to send a message to a server to change a pixel on the canvas. In the example below, we use the requests library to send the message in JSON format.",
	"info.info1": "The assignments assume no prior knowledge of programming.",
	"code.json.title": "JSON body example",
	"code.python.title": "Python example",
	"copy": "Copy",
	"copy.success": "Copied!",
	"footer": "Made with ❤️ by",
	"comments": {
		"one": "# This is the URL of the server where we send the pixels.",
		"two": "# Pixel information in JSON format.\n# The \"key\" contains a secret code that is unique to everyone.\n# This way the server knows who sent which pixel.",
		"three": "# Here the pixel information is sent to the server.\n# We use the post function from the requests library for this.",
		"four": "# Here the result is printed so we know if our script was executed successfully.",
		"five": "# If it succeeded, a success message is printed.",
		"six": "# If it didn't succeed, an error message is printed with the HTTP status code."
	},
	"code": {
		"python": {
			"putPixel1": "import requests\nimport json\n\n# This is the URL of the server where we send the pixels.\n",
			"putPixel2": "\nheaders = {'Content-Type': 'application/json'}\n\n# This is a function.\n# We will use this function to send a pixel to the canvas.\ndef sendPixel(pixel):\n",
			"putPixel3": "\n    print(response.content)\n\n# First, we will create a pixel.\n# This is a variable that contains the following information.\n#    x: the x coordinate where we want to place the pixel.\n#    y: the y coordinate where we want to place the pixel.\n#    color: the color the pixel should be in RGB.\n",
			"putPixel4": "\n\n# By passing this pixel variable to the sendPixel function, it will be sent to the server.\nsendPixel(pixel)",
			"color": "# Pixel information in JSON format.\n# This pixel will be red because the first value of color is fully on and the rest are fully off.\n",
			"comment1": "# The # at the beginning of this line indicates that this is a comment.\n# Comments are not executed when we run a script.\n# They are very useful for us to indicate why we did something!",
			"comment2": "Define the pixel data as a Python dictionary",
			"comment3": "Send a POST request to the API endpoint with the pixel data as JSON",
			"comment4": "Check if the request was successful",
			"comment5": "If the request was successful, print a success message",
			"comment6": "If the request was not successful, print an error message that includes the HTTP status code",
			"loop": "# This script uses a for loop to print 1 through 10.\nfor i in range(0, 10):\n    # Everything indented at this level is part of the for loop.\n    p = i + 1\n    print(p)\n# Once the indentation returns to the base level, it is outside the for loop.\nprint(\"outside the for loop\")",
			"function": "# The keyword def indicates that we are creating our own function\n# within the parentheses is world, a variable we can pass to use within the function.\ndef hello_world(world):\n    print(\"hello world:\", world, \"!\")\n\nhello_world(\"earth\")",
			"prototypes": "# len is the length of the line.\ndef create_horizontal_line(x, y, color, len):\n\ndef create_vertical_line(x, y, color, len):",
			"helloworld": "# This is the print function, it can display information in a window we call the console.\nprint(\"hello world!\")",
			"printx": "x = 42\nprint(x)",
			"addition": "x = x + 1"
		}
	},
	"exercise": {
		"addition": "Using the 2 codes above, create a program that prints 43.",
		"putPixel": "Copy the code and check if we have placed a pixel on the canvas after running it with the Run button",
		"putPixel2": "Is the pixel placed at this location?",
		"color1": "Place a colored pixel on the canvas",
		"color2": "Place a pink, orange, purple, and light green pixel on the canvas",
		"color3": "Place 2 pixels on the canvas by running the script once.",
		"loop": "Use a for loop to place a line of 10 pixels.",
		"functions1": "Create functions using the prototypes in the example below.",
		"functions2": "Use the functions you just created to make a square.",
		"functions3": "Create a function that can draw a square.",
		"extra1": "Create a function that can draw a circle.",
		"extra2": "Create a function that can draw a small pixel figure at a random location",
		"extra3": "Create a function that can draw a line.",
		"helloworld": "Copy this piece of code and run it in Trinket. Check if the text appears on the right side."
	},
	"hint": {
		"colab": "If you get stuck, see how others do it."
	}
}
